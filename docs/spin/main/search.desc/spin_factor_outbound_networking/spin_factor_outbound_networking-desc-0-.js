searchState.loadedDescShard("spin_factor_outbound_networking", 0, "An address is a url-like string that contains a host, a …\nA check for whether a URL is allowed by the outbound …\nA parsed URL used for outbound networking.\nGet the raw values of the <code>allowed_outbound_hosts</code> locked …\nDetermine if the supplied url is allowed\nChecks if allowed hosts permit relative requests\nChecks address against allowed hosts\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to parse the address.\nParse a URL.\nRecords the address host, port, and database as fields on …\nSets a handler to be called when a request is disallowed …\nValidates that all service chaining of an app will be …\nTLS configurations for a specific component.\nRuntime configuration for outbound networking.\nTLS configuration for one or more component(s) and host(s).\nA certificate and private key to be used as the client …\nThe component(s) this configuration applies to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>ClientConfig</code> for the given component and host …\nReturns a <code>ClientConfig</code> for the given host authority.\nReturns <code>ComponentTlsConfigs</code> for the given component.\nThe host(s) this configuration applies to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns runtime config with the given list of <code>TlsConfig</code>s. …\nA set of CA certs that should be considered valid roots.\nIf true, the “standard” CA certs defined by …\nSpin’s default handling of the runtime configuration for …\nGet the runtime configuration for client TLS from a TOML …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SpinTlsRuntimeConfig</code>.")