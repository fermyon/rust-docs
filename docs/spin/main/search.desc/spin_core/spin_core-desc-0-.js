searchState.loadedDescShard("spin_core", 0, "Spin core execution engine\nWhen the <code>component-model</code> feature is enabled this trap …\nFor consumers that need to use a type other than <code>State</code> as …\nUsed to indicate that a trap was raised by atomic wait …\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nWhen the <code>component-model</code> feature is enabled this trap …\nA compiled WebAssembly Component.\nGlobal configuration for <code>EngineBuilder</code>.\nThe default <code>EngineBuilder::epoch_tick_interval</code>.\nAn <code>Engine</code> is a global context for the initialization and …\nA builder interface for configuring a new <code>Engine</code>.\nA wasm atomic operation was presented with a …\nIndirect call to a null table entry.\nAn instantiated component.\nA “pre-instantiated” <code>Instance</code> which has all of its …\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nExecution has potentially run too long and may be …\nA type used to instantiate <code>Component</code>s.\nAn out-of-bounds memory access.\nA compiled WebAssembly module, ready to be instantiated.\nAn instantiated WebAssembly module.\nAttempt to get the bits of a null <code>i31ref</code>.\nCall to a null reference.\nWhen wasm code is configured to consume fuel and it runs …\nThe current stack space was exhausted.\nHost state data associated with individual Stores and …\nA <code>Store</code> holds the runtime state of a Spin instance.\nA builder interface for configuring a new <code>Store</code>.\nAn out-of-bounds access to a table.\nCode that was supposed to have been unreachable was …\nAn <code>Engine</code> which is a global context for compilation and …\nGet the map from <code>.text</code> section offsets to Wasm binary …\nConfigures whether or not name-shadowing is allowed.\nGives access to the inner <code>State</code>.\nBuilds a <code>Store</code> from this builder with given host state …\nBuilds an <code>Engine</code> from this builder.\nCreates a new <code>EngineBuilder</code> with the given <code>Config</code>.\nReturns the underlying component that will be instantiated.\nReturns the type of this component as a <code>types::Component</code>.\nReturns the configuration settings that this engine is …\nProvides access to the inner <code>wasmtime::Store</code>’s data.\nProvides access to the inner <code>wasmtime::Store</code>’s data.\nImplement any imports of the given <code>Component</code> with a …\nDeserializes an in-memory compiled module previously …\nSame as <code>Module::deserialize</code>, but for components.\nSame as <code>deserialize</code>, except that the contents of <code>path</code> are …\nSame as <code>Module::deserialize_file</code>, but for components.\nDetects whether the bytes provided are a precompiled …\nLike <code>Engine::detect_precompiled</code>, but performs the …\nDisable the pooling instance allocator.\nEnable the Wasmtime compilation cache. If <code>path</code> is given it …\nReturns the underlying engine.\nReturns the <code>Engine</code> this is connected to.\nReturns the <code>Engine</code> that this <code>Module</code> was compiled by.\nReturns the <code>Engine</code> that this <code>Component</code> was compiled by.\nSets the epoch tick internal for the built <code>Engine</code>.\nConfigures whether the epoch ticker thread will be spawned …\nLooks up a specific export of this component by <code>name</code> …\nReturns the list of exported items from this <code>Instance</code>.\nReturns the list of exports that this <code>Module</code> has and will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new WebAssembly <code>Module</code> from the given in-memory …\nCompiles a new WebAssembly component from the in-memory …\nCreates a new WebAssembly <code>Module</code> from the contents of the …\nCompiles a new WebAssembly component from a wasm file on …\nCreates a new WebAssembly <code>Module</code> from the contents of the …\nConverts a byte back into a <code>Trap</code> if its in-bounds\nGet information about functions in this module’s <code>.text</code> …\nLooks up an exported <code>Extern</code> value by name.\nLooks up an export in this <code>Module</code> by name.\nA methods similar to <code>Component::export_index</code> except for …\nLooks up an export in this <code>Module</code> by name to get its index.\nLooks up an exported <code>Func</code> value by name.\nLooks up an exported function by name within this <code>Instance</code>.\nLooks up an exported <code>Global</code> value by name.\nLooks up an exported <code>Memory</code> value by name.\nLooks up an exported module by name within this <code>Instance</code>.\nLooks up an exported <code>Extern</code> value by a <code>ModuleExport</code> value.\nLooks up an exported resource type by name within this …\nLooks up an exported <code>SharedMemory</code> value by name.\nLooks up an exported <code>Table</code> value by name.\nLooks up an exported <code>Func</code> value by name and with its type.\nLooks up an exported <code>Func</code> value by name and with its type.\nReturns the range of bytes in memory where this module’s …\nReturns the range, in the host’s address space, that …\nReturns the list of imports that this <code>Module</code> has and must …\nIncrements the epoch.\nForce initialization of copy-on-write images to happen …\nReturns a builder for the named instance specified.\nPerforms the instantiation process into the store …\nInstantiates the <code>Component</code> provided into the <code>store</code> …\nPerforms the instantiation process into the store …\nInstantiates the <code>Component</code> provided into the <code>store</code> …\nCreates a new <code>InstancePre</code> for the given <code>Component</code>.\nPerforms a “pre-instantiation” to resolve the imports …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the engine is configured to support async …\nReturns a reference to the <code>Linker</code> for this <code>Engine</code>.\nSets a maximum memory allocation limit.\nGet the amount of memory in bytes consumed by instances in …\nGet this instance’s module.\nReturns identifier/name that this <code>Module</code> has. This name is …\nCreates a new linker for the <code>Engine</code> specified with no …\nCreates a new <code>Instance</code> from the previously compiled <code>Module</code> …\nCreates a new WebAssembly <code>Module</code> from the given in-memory …\nCompiles a new WebAssembly component from the in-memory …\nCreates a new <code>Engine</code> with the specified compilation and …\nSame as <code>Instance::new</code>, except for usage in [asynchronous …\nReturns a <code>std::hash::Hash</code> that can be used to check …\nSame as <code>Engine::precompile_module</code> except for a <code>Component</code>\nAhead-of-time (AOT) compiles a WebAssembly module.\nReturns a summary of the resources required to instantiate …\nReturns a summary of the resources required to instantiate …\nReturns the “root instance” of this linker, used to …\nReturns whether the engine <code>a</code> and <code>b</code> refer to the same …\nSerializes this module to a vector of bytes.\nSame as <code>Module::serialize</code>, except for a component.\nSets the execution deadline.\nCreates a new <code>StoreBuilder</code>.\nReturns the <code>types::Component</code> corresponding to <code>component</code> …\nGet this module’s code object’s <code>.text</code> section, …\nEagerly initialize thread-local functionality shared by …\nUnload process-related trap/signal handlers and destroy …\nValidates <code>binary</code> input data as a WebAssembly binary given …\nTake a weak reference to this engine.")