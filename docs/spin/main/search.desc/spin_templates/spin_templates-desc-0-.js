searchState.loadedDescShard("spin_templates", 0, "Package for working with Wasm component templates.\nCreate a new component in an existing application from the …\nThe template was skipped because it was already present.\nInstall from a directory in the file system.\nInstall from a Git repository at the specified URL. If a …\nOptions controlling template installation.\nThe results of installing a set of templates.\nA recoverable problem while listing templates.\nThe template was skipped because its manifest was missing …\nThe manifest is invalid. The directory may not represent a …\nThe result of listing templates.\nCreate a new application from the template.\nUsed during template installation to report progress and …\nExecutes a template to the point where it is ready to …\nOptions controlling the execution of a template.\nThe reason a template was skipped during installation.\nA Spin template.\nProvides access to and operations on the set of installed …\nA source from which to install templates.\nThe variant mode in which a template should be run.\nIf true accept default values where available\nSkip the overwrite prompt if the output directory already …\nThe noun that should be used for the variant in a prompt, …\nA human-readable description of the template, provided by …\nA human-readable description of the variant.\nA human-readable description of the template, provided by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the specified template. The result will be …\nThe ID of the template. This is used to identify the …\nInstalls templates from the specified source.\nThe templates that were installed during the install …\nA human-readable description of where the template was …\nRuns the template interactively. The user will be prompted …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets whether the <code>InstallationResults</code> contains no …\nLists all installed templates.\nLists all installed templates that match all the provided …\nReturns true if the templates matches the provided set of …\nThe name of the generated item.\nReturns true if no templates were found or skipped, and …\nIf true, do not create a .gitignore file\nThe path at which to generate artefacts.\nThe noun that should be used for the variant in a prompt\nReport the specified message.\nFor a Git source, resolves the tag to use as the source. …\nCreates a runner for the template, governed by the given …\nRuns the template silently. The template will be executed …\nThe templates that were skipped during the install …\nAny skipped templates (populated as a result of filtering …\nThe Git repository from which the template was installed, …\nChecks if the template supports the specified variant mode.\nThe set of tags associated with the template, provided by …\nThe installed templates.\nCreates a <code>TemplateManager</code> for the default install location.\nCreates a <code>TemplateSource</code> referring to the specified Git …\nUninstalls the specified template.\nSets the option to update existing templates. If <code>update</code> is …\nThe values to use for template parameters.\nThe variant mode in which to run the template.\nAny warnings identified during the list operation.\nThe manifest to which the component will be added.")