searchState.loadedDescShard("spin_plugins", 0, "Houses utilities for getting the path to Spin plugin …\nReturns the argument unchanged.\nGets the path to where Spin plugin are installed.\nGet the path to the manifests directory which contains the …\nCalls <code>U::from(self)</code>.\nGet the path to the subdirectory of an installed plugin.\nReturns the PluginManifest for an installed plugin with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains error details for when there is an error getting …\nContains the error value\nError message during plugin lookup or deserializing\nContains error details for when a plugin manifest cannot …\nContains error details for when a plugin resource cannot …\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLooks up plugin manifests in centralized spin plugin …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe installation needs to continue.\nThe action required to install a plugin to the desired …\nPlugin manifest can be copied from a local path.\nLocation of manifest of the plugin to be installed.\nNo further action is required. This occurs when the plugin …\nProvides accesses to functionality to inspect and manage …\nPlugin manifest lives in the centralized plugins repository\nPlugin manifest should be pulled from a specific address.\nChecks manifest to see if the plugin is compatible with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetches a manifest from a local, remote, or repository …\nGets the appropriate package for the running OS and Arch …\nInstalls the Spin plugin with the given manifest If …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying store object\nCreates a <code>PluginManager</code> with the default install location.\nUninstalls a plugin with a given name, removing it and it…\nExpected schema of a plugin manifest. Should match the …\nDescribes compatibility and location of a plugin source.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the plugin supports the currently running …")