searchState.loadedDescShard("spin_expressions", 0, "Contains the error value\nA variable resolution error.\nInvalid variable name.\nInvalid variable template.\nA variable key\nContains the success value\nA resolver who has resolved all variables.\nVariable provider error.\nA <code>Resolver</code> which is extended by <code>Provider</code>s.\nA variable resolver.\nA <code>ProviderResolver</code> that can be shared.\nTemplate represents a simple string template that allows â€¦\nUndefined variable.\nAdds component variable values to the Resolver.\nAdds component variable values to the Resolver.\nAdds a variable Provider to the Resolver.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a Resolver for the given Tree.\nCreates a Resolver for the given Tree.\nCreates a new Key.\nFully resolve all variables into a <code>PreparedResolver</code>.\nResolves a variable value for the given path.\nResolves a variable value for the given path.\nResolves all variables for the given component.\nResolves the given template.\nResolves a the given template.\nA config provider.\nReturns the value at the given config path, if it exists.")